{"version":3,"sources":["components/Navbar.js","helpers/getDate.js","helpers/getPosition.js","helpers/getWeather.js","Loader.js","components/WeatherMain.js","context/DataContext.js","components/theme/Theme.js","App.js","index.js"],"names":["Navbar","setCity","date","month","Date","getMonth","day","getDay","monthName","dateArr","setMonth","Intl","DateTimeFormat","format","getDate","getFullYear","useState","newCity","setNewCity","toLocaleTimeString","hour","setHour","useEffect","interval","setInterval","clearInterval","Nav","InputBox","onSubmit","e","preventDefault","type","placeholder","onChange","target","value","SearchIcon","className","ActualDate","Clock","styled","div","theme","cardColor","text","form","hover","getPosition","a","axios","ip","data","city","error","getWeather","url","weather","Loader","WeatherMain","setWeather","pos","getData","Container","Weather","Temp","main","temp","temp_min","temp_max","src","icon","alt","description","Details","name","wind","speed","sys","sunrise","sunset","title","subtitle","DataContext","createContext","DataProvider","children","darkMode","setDarkMode","getHours","console","log","Provider","Themes","light","background","dark","App","useContext","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.79fc5817.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { getDate } from \"../helpers/getDate\";\nimport { SearchIcon } from \"@heroicons/react/outline\";\n\nconst Navbar = ({ setCity }) => {\n\tconst date = getDate();\n\tconst [newCity, setNewCity] = useState(\"\");\n\tconst [hour, setHour] = useState(new Date().toLocaleTimeString());\n\n\t// Here is how the clock are working \n\t// This effect will execute the code every second\n\tuseEffect(() => {\n\t\tlet interval = setInterval(() => {\n\t\t\tsetHour(new Date().toLocaleTimeString());\n\t\t}, 1000);\n\n\t\treturn () => {\n\t\t\tclearInterval(interval);\n\t\t};\n\t}, []);\n\n\tconst handleSubmit = (e) => {\n\t\te.preventDefault();\n\n\t\tsetCity(newCity);\n\n\t\tsetNewCity(\"\");\n\t};\n\n\tconst handleChange = (e) => {\n\t\tsetNewCity(e.target.value);\n\t};\n\n\treturn (\n\t\t<Nav>\n\t\t\t<InputBox onSubmit={handleSubmit}>\n\t\t\t\t<input\n\t\t\t\t\ttype='text'\n\t\t\t\t\tplaceholder='Enter a city name'\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\tvalue={newCity}\n\t\t\t\t/>\n\t\t\t\t<button type='submit'>\n\t\t\t\t\t<SearchIcon className='search' />\n\t\t\t\t</button>\n\t\t\t</InputBox>\n\t\t\t<ActualDate>\n\t\t\t\t{date[0]}, {date[2]} {date[1]}\n\t\t\t</ActualDate>\n\t\t\t<Clock>{hour}</Clock>\n\t\t</Nav>\n\t);\n};\n\nexport default Navbar;\n\n\n// Styles\n\nconst Nav = styled.div`\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: flex-center;\n\tbackground-color: ${({ theme }) => theme.cardColor};\n\tpadding: 10px 20px;\n\tcolor: ${({ theme }) => theme.text};\n\ttransition: 0.5s all ease-in;\n`;\n\nconst InputBox = styled.form`\n\tinput {\n\t\tpadding: 4px;\n\t\tfont-size: 14px;\n\t\tborder: none;\n\t\tborder-bottom: solid 1px;\n\t\tborder-color: ${({ theme }) => theme.text};\n\t\tbackground-color: transparent !important;\n\t\tcolor: #000000;\n\t\toutline: none !important;\n\t\tborder-radius: 0 !important ;\n\t\ttransition: 0.5s all ease-in;\n\t\tcolor: ${({ theme }) => theme.text};\n\n\t\t::placeholder {\n\t\t\tcolor: ${({ theme }) => theme.placeholder};\n\t\t\twhite-space: nowrap;\n\t\t\ttext-overflow: ellipsis;\n\t\t\toverflow: hidden;\n\t\t}\n\t}\n\n\t.search {\n\t\twidth: 1.5rem;\n\t}\n\n\tbutton {\n\t\tbackground: transparent;\n\t\tborder: none;\n\t\t/* border-bottom: solid 2px #777; */\n\t\tborder-radius: 10px;\n\t\toutline: none;\n\t\tcolor: ${({ theme }) => theme.text};\n\t\t/* margin-left: 1px; */\n\t\tfont-weight: 500;\n\t\ttransition: 0.2s all ease-in;\n\t}\n\n\tbutton:hover {\n\t\tcolor: ${({ theme }) => theme.hover};\n\t}\n\n\t@media screen and (max-width: 640px) {\n\t\tinput {\n\t\t\twidth: 90px;\n\n\t\t\t::placeholder {\n\t\t\t\twhite-space: nowrap;\n\t\t\t\ttext-overflow: ellipsis;\n\t\t\t\toverflow: hidden;\n\t\t\t}\n\t\t}\n\t}\n`;\n\nconst ActualDate = styled.div`\n\tjustify-self: center;\n\n\t@media screen and (max-width: 640px) {\n\t\tfont-size: 13px;\n\t}\n`;\n\nconst Clock = styled.div`\n\t@media screen and (max-width: 640px) {\n\t\tfont-size: 13px;\n\t}\n`;\n","export function getDate() {\n  \n  let month = new Date().getMonth();\n  let day = new Date().getDay();\n  let monthName = \"\";\n  const dayNames = {\n    0: \"Sunday\",\n    1: \"Monday\",\n    2: \"Tuesday\",\n    3: \"Wenesday\",\n    4: \"Thursday\",\n    5: \"Friday\",\n    6: \"Saturday\",\n  };\n  const dateArr = [];\n\n  const date = new Date();\n\n  if (month >= 0 || month <= 12) {\n    date.setMonth(month);\n    monthName = Intl.DateTimeFormat(\"en-EN\", { month: \"long\" }).format(date);\n  }\n\n  dateArr[0] = dayNames[day];\n  dateArr[1] = date.getDate();\n  dateArr[2] = monthName;\n  dateArr[3] = date.getFullYear();\n\n  return dateArr;\n}\n","import axios from \"axios\";\n\n\nconst getPosition = async () => {\n\n  // Get the actual position using the user IP\n\n  const ip = await axios(\"https://ipapi.co/json/\")\n\n  if (ip?.data) {\n    return ip?.data.city;\n  }\n\n  return {\n    error: \"Error 404\",\n    text: \"Not Found\",\n  };\n};\n\nexport default getPosition;\n","import axios from \"axios\";\n\nconst getWeather = (city) => {\n\n  // Get the weather using a city as a parameter\n  //  The city can be provided by the user or can be obtained from the current position\n\n  const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&APPID=eed4708dfbdf137040a5c234469e9683`;\n\n  const weather = axios(url);\n\n  if (weather) {\n    return weather;\n  }\n\n  return {\n    error: 404,\n    text: \"Not Found\",\n  };\n};\n\nexport default getWeather;\n","import React from \"react\";\nimport \"./Loader.css\";\n\nexport const Loader = () => {\n  return (\n    <div className=\"lds-spinner\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport getPosition from \"../helpers/getPosition\";\nimport getWeather from \"../helpers/getWeather\";\nimport { Loader } from \"../Loader\";\n\nconst WeatherMain = ({ city }) => {\n\tconst [weather, setWeather] = useState(\"\");\n\n\tuseEffect(() => {\n\t\t// If the city is not defined then will going to use the position to hava a city\n\t\t// Else will make an api call to get the weather for the city that the user want to see\n\t\tconst getData = async () => {\n\t\t\tsetWeather(\"\");\n\t\t\tlet pos = \"\";\n\n\t\t\tif (city) {\n\t\t\t\tpos = city;\n\t\t\t} else {\n\t\t\t\tpos = await getPosition();\n\t\t\t}\n\n\t\t\tconst data = await getWeather(pos);\n\n\t\t\tsetWeather(data.data);\n\t\t};\n\n\t\tgetData();\n\t}, [city]);\n\n\treturn (\n\t\t<Container className='animate__fadeInDown'>\n\t\t\t{weather ? (\n\t\t\t\t<Weather>\n\t\t\t\t\t<div className='main animate__fadeInDown'>\n\t\t\t\t\t\t<Temp>\n\t\t\t\t\t\t\t<h1>{weather.main.temp}°</h1>\n\t\t\t\t\t\t\t<div className={\"temp_details\"}>\n\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\tTemp Min{\" \"}\n\t\t\t\t\t\t\t\t\t<span>{weather.main.temp_min}°</span>\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\tTemp Max{\" \"}\n\t\t\t\t\t\t\t\t\t<span>{weather.main.temp_max}°</span>\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Temp>\n\t\t\t\t\t\t<div className='icon-container'>\n\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t// Here I'm using custom icons because the api icos are terribles\n\t\t\t\t\t\t\t\tsrc={`/icons/${weather.weather[0].icon}.svg`}\n\t\t\t\t\t\t\t\talt='Weather-Icon'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<p>{weather.weather[0].description}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<Details>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t<strong>City</strong>\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t<strong>{weather.name}</strong>\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<p>Wind</p>\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t{weather.wind.speed} <span>K/h</span>\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<p>Sunrise</p>\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t{new Date(\n\t\t\t\t\t\t\t\t\tweather.sys.sunrise\n\t\t\t\t\t\t\t\t).toLocaleTimeString()}\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<p>Sunset</p>\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t{new Date(\n\t\t\t\t\t\t\t\t\tweather.sys.sunset\n\t\t\t\t\t\t\t\t).toLocaleTimeString()}\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Details>\n\t\t\t\t</Weather>\n\t\t\t) : (\n\t\t\t\t<Loader />\n\t\t\t)}\n\t\t</Container>\n\t);\n};\n\nexport default WeatherMain;\n\n// Styles \n\nconst Container = styled.div`\n\twidth: auto;\n\tmax-width: 1400px;\n\tmargin: auto;\n\tbackground-size: cover;\n\tdisplay: flex;\n\tflex-direction: column;\n\tjustify-content: space-evenly;\n\tpadding: 20px 0;\n\tcolor: ${({ theme }) => theme.text};\n\ttransition: 0.5s all ease-in;\n`;\n\nconst Weather = styled.div`\n\tdisplay: flex;\n\tjustify-content: center;\n\tflex-direction: column;\n\talign-items: center;\n\tgap: 10px;\n\n\t.main {\n\t\twidth: 80%;\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\talign-items: center;\n\t\tbackground-color: ${({ theme }) => theme.cardColor};\n\t\tborder-radius: 7px;\n\t\ttransition: 0.5s all ease-in;\n\n\t\t@media screen and (max-width: 640px) {\n\t\t\tflex-direction: column-reverse;\n\t\t\talign-items: center;\n\t\t}\n\t}\n\n\t.icon-container {\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t\tflex-direction: column;\n\t\tmargin-right: 20px;\n\n\t\tp {\n\t\t\tfont-weight: bold;\n\t\t\ttext-transform: uppercase;\n\t\t\tmargin-top: -40px;\n\t\t}\n\t}\n\n\timg {\n\t\theight: 220px;\n\t\tmax-height: 220px;\n\t\twidth: auto;\n\t\tmax-width: 220px;\n\t}\n`;\n\nconst Temp = styled.div`\n\ttext-align: center;\n\tmargin-left: 40px;\n\t.temp_details {\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t\tgap: 50px;\n\t}\n\n\th1 {\n\t\tfont-size: 3.5em;\n\t\tmargin-bottom: 20px;\n\t\tcolor: ${({ theme }) => theme.title};\n\t\ttransition: 0.5s all ease-in;\n\t}\n\n\tp {\n\t\tfont-size: 1em;\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t\tflex-direction: column;\n\t\tcolor: ${({ theme }) => theme.subtitle};\n\t\ttransition: 0.5s all ease-in;\n\t}\n\n\tspan {\n\t\tfont-weight: 700;\n\t}\n`;\n\nconst Details = styled.div`\n\twidth: 80%;\n\tmargin: auto;\n\tbackground-color: ${({ theme }) => theme.cardColor};\n\tborder-radius: 7px;\n\tpadding: 50px;\n\ttransition: 0.5s all ease-in;\n\tdiv {\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\talign-items: flex-start;\n\t}\n`;\n","import React, { createContext, useState, useEffect } from \"react\";\n\nexport const DataContext = createContext();\n\nexport const DataProvider = ({ children }) => {\n\t//  darkMode is used to tell the styled components what colors have to use\n\tconst [darkMode, setDarkMode] = useState(\"light\");\n\tconst [hour, setHour] = useState(new Date().getHours());\n\n\tuseEffect(() => {\n\t\t// This is an interval to change the theme automatically when the conditions are true\n\t\t//  The interval will be executed every 1 hour\n\t\tsetInterval(() => {\n\t\t\tsetHour(new Date().getHours());\n\t\t}, 60000);\n\n\t\tif (hour >= 18 || hour <= 7) {\n\t\t\tsetDarkMode(\"dark\");\n\t\t} else {\n\t\t\tconsole.log(hour);\n\t\t\tsetDarkMode(\"light\");\n\t\t}\n\t}, [hour]);\n\n\treturn (\n\t\t<DataContext.Provider value={{ darkMode }}>\n\t\t\t{children}\n\t\t</DataContext.Provider>\n\t);\n};\n","\n// Those are the necesary styles for set the dark mode or the light mode\n\n\n  const lightTheme = {\n    text: \"#282828\",\n    cardColor: \"rgba(250, 250, 250, 0.4)\",\n    background: \"url('/img/day.png')\",\n    title: \"#121212\",\n    subtitle: \"#181818\",\n    hover: \"#270082\",\n    placeholder: \"rgba(25,25,25,0.4)\"\n};\n\n  const darkTheme = {\n    text: \"#b3b3b3\",\n    cardColor: \"rgba(24, 24, 24, 0.4)\",\n    background: \"url('/img/night.PNG')\",\n    title: \"#fff\",\n    subtitle: \"#b3b3b3\",\n    hover: \"#537EC5\",\n    placeholder: \"rgba(179,179,179,0.4)\"\n};\n\nconst Themes = {\n    light: lightTheme,\n    dark: darkTheme\n}\n\nexport default Themes","import React, { useState, useContext } from \"react\";\nimport styled, { ThemeProvider } from \"styled-components\";\nimport Navbar from \"./components/Navbar\";\nimport WeatherMain from \"./components/WeatherMain\";\nimport { DataContext } from \"./context/DataContext\";\nimport { Themes } from \"./components\";\n\nconst App = () => {\n\tconst [city, setCity] = useState(\"\");\n\n\tconst { darkMode } = useContext(DataContext);\n\n\treturn (\n\t\t<ThemeProvider theme={Themes[darkMode]}> {/* Theme provider to change between dark and light mode with styled components*/}\n\t\t\t<Container darkMode={darkMode}>\n\t\t\t\t<Navbar setCity={setCity} />\n\t\t\t\t<WeatherMain city={city} setCity={setCity} />\n\t\t\t</Container>\n\t\t</ThemeProvider>\n\t);\n};\n\nexport default App;\n\nconst Container = styled.div`\n\tbackground: ${({ theme }) => theme.background};\n\n\tbackground-size: cover;\n\ttransition: 0.5s all ease-in;\n\n\t@media screen and (min-width: 700px) {\n\t\theight: 100vh;\n\t}\n`;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { DataProvider } from \"./context/DataContext\";\nimport \"./index.css\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<DataProvider> {/* Provider for set the dark mode */}\n\t\t\t<App />\n\t\t</DataProvider>\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n"],"sourceRoot":""}